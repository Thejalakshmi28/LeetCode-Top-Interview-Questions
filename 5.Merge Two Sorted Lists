/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1 == NULL)
        {
			return list2;
		}
		
		// if list2 happen to be NULL
		// we will simply return list1.
		if(list2 == NULL)
        {
			return list1;
		} 
        ListNode *dummy, *temp;
        dummy = new ListNode(); //dummy is the sorted linked list to return
        temp = dummy; //temp and dummy is now pointing to same address(they r both pointers). so any change in temp will affect dummy
        
        //when both list1 and list2 isn't empty
        while(list1 && list2){
            if(list1->val < list2->val){
                temp->next = list1; //we start the list from temp->next
                list1 = list1->next;
            }
            else{
                temp->next = list2;
                list2 = list2->next;   
            }
            temp = temp->next;
        }
        
        // we reached at the end of one of the list
        if(list1) temp->next = list1;
        if(list2) temp->next = list2;
        
        return dummy->next; //temp changes its address at every iteration. Thats why we have used dummy to carry initial address. Linked list starts from temp->next/dummy->next
    }
};
